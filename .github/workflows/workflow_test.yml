name: Just check
on:
  pull_request:
    branches:
      - main

jobs:
  test-gcp:
    runs-on: ubuntu-latest
    env:
      MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      MYSQL_DB: ${{ secrets.MYSQL_DB }}
      FLASK_APP: 'app'
      LOG_FILE: ${{ secrets.LOG_FILE }}
      GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
      SOURCE_GCI_IMAGE: ${{ secrets.SOURCE_GCI_IMAGE }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_IMAGE_BUILD_NETWORK: ${{ secrets.GCP_IMAGE_BUILD_NETWORK }}
      BUILD_IMAGE_ZONE: ${{ secrets.BUILD_IMAGE_ZONE }}
      ENV_TYPE: "Test"
      MACHINE_TYPE: ${{ secrets.MACHINE_TYPE }}
      DISK_TYPE: ${{ secrets.DISK_TYPE }}
      DISK_SIZE: ${{ secrets.DISK_SIZE }}
      DISK_MODE: ${{ secrets.DISK_MODE }}
      GCP_REGION: ${{ secrets.GCP_REGION }}
      KEY_RING: ${{ secrets.KEY_RING }}
      VM_KMS_DISK_KEY: ${{ secrets.VM_KMS_DISK_KEY }}
      CLOUD_SQL_HOST: ${{ secrets.CLOUD_SQL_HOST }}
      CLOUD_SQL_USER: ${{ secrets.CLOUD_SQL_USER }}
      CLOUD_SQL_PASSWORD: ${{ secrets.CLOUD_SQL_PASSWORD }}
      CLOUD_SQL_DB: ${{ secrets.CLOUD_SQL_DB }}
      PUBSUB_TOPIC: ${{ secrets.PUBSUB_TOPIC }}
      VPC_NETWORK_NAME: ${{ secrets.VPC_NETWORK_NAME }}
      SUB_NETWORK_NAME: ${{ secrets.SUB_NETWORK_NAME }}
      SERVICE_ACCOUNT_ID: ${{ secrets.SERVICE_ACCOUNT_ID }}
      INSTANCE_GROUP_NAME: ${{ secrets.INSTANCE_GROUP_NAME }}

    steps:
      - name: authenticate gcloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@v2

      - name: 'Use gcloud CLI'
        run: gcloud info

      - name: Continuous deployment of the code
        run: |
          gcloud components update

          IMAGE_ID=$(gcloud compute images list --no-standard-images \
            --format="table(NAME,CREATION_TIMESTAMP)" --sort-by="CREATION_TIMESTAMP" \
          | tail -n 1)
          RANDOM_ID=$(cat /proc/sys/kernel/random/uuid)
          
          gcloud compute instance-templates create webapp-instance-template-$RANDOM_ID \
          --machine-type=${ env.MACHINE_TYPE } --create-disk=image=projects/${env.GCP_PROJECT_ID}/global/images/$IMAGE_ID, type=${ env.DISK_TYPE }, size=${ env.DISK_SIZE}, \
          kms-key=projects/${ env.GCP_PROJECT_ID }/locations/${ env.GCP_REGION }/keyRings/${ env.KEY_RING }/cryptoKeys/${ env.VM_KMS_DISK_KEY } \
          --metadata=startup-script='#!/bin/bash

          FILE_PATH="/etc/environment"

          # Export env variables only when file doesn't exist
          if [[ ! -e $FILE_PATH || ! -s $FILE_PATH ]]; then
              echo "MYSQL_HOST=${ env.CLOUD_SQL_HOST }" | sudo tee -a /etc/environment
              echo "MYSQL_USER=${ env.CLOUD_SQL_USER }" | sudo tee -a /etc/environment
              echo "MYSQL_PASSWORD=${ env.CLOUD_SQL_PASSWORD }" | sudo tee -a /etc/environment
              echo "MYSQL_DB=${ env.CLOUD_SQL_DB }" | sudo tee -a /etc/environment
              echo "LOG_FILE=${ env.LOG_FILE }" | sudo tee -a /etc/environment
              echo "GCP_PROJECT_ID=${ env.GCP_PROJECT_ID }" | sudo tee -a /etc/environment
              echo "PUBSUB_TOPIC_ID=${ env.PUBSUB_TOPIC }" | sudo tee -a /etc/environment
          fi

          sudo touch /var/log/start_up_executed' \
          --network-interface=network=${ env.VPC_NETWORK_NAME }, subnet=${ env.SUB_NETWORK_NAME } \
          --tags webapp \
          --service-account=${ env.SERVICE_ACCOUNT_ID } --scopes=["pubsub", "cloud-platform"]

          gcloud compute instance-groups managed rolling-action start-update ${ env.INSTANCE_GROUP_NAME } \
          --replacement-method=recreate --version=template=webapp-instance-template-$RANDOM_ID \
          --max-unavailable=1 --max-surge=0
          
          gcloud compute instance-groups managed wait-until ${ env.INSTANCE_GROUP_NAME } \
          --version-target-reached
