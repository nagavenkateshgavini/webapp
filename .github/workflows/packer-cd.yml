name: Packer Build
on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  packer-build:
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    env:
      MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      MYSQL_DB: ${{ secrets.MYSQL_DB }}
      FLASK_APP: 'app'
      LOG_FILE: ${{ secrets.LOG_FILE }}
      GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
      SOURCE_GCI_IMAGE: ${{ secrets.SOURCE_GCI_IMAGE }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_IMAGE_BUILD_NETWORK: ${{ secrets.GCP_IMAGE_BUILD_NETWORK }}
      BUILD_IMAGE_ZONE: ${{ secrets.BUILD_IMAGE_ZONE }}
      ENV_TYPE: "Test"
      MACHINE_TYPE: ${{ secrets.MACHINE_TYPE }}
      DISK_TYPE: ${{ secrets.DISK_TYPE }}
      DISK_SIZE: ${{ secrets.DISK_SIZE }}
      DISK_MODE: ${{ secrets.DISK_MODE }}
      GCP_REGION: ${{ secrets.GCP_REGION }}
      KEY_RING: ${{ secrets.KEY_RING }}
      VM_KMS_DISK_KEY: ${{ secrets.VM_KMS_DISK_KEY }}
      CLOUD_SQL_HOST: ${{ secrets.CLOUD_SQL_HOST }}
      CLOUD_SQL_USER: ${{ secrets.CLOUD_SQL_USER }}
      CLOUD_SQL_PASSWORD: ${{ secrets.CLOUD_SQL_PASSWORD }}
      CLOUD_SQL_DB: ${{ secrets.CLOUD_SQL_DB }}
      PUBSUB_TOPIC: ${{ secrets.PUBSUB_TOPIC }}
      VPC_NETWORK_NAME: ${{ secrets.VPC_NETWORK_NAME }}
      SUB_NETWORK_NAME: ${{ secrets.SUB_NETWORK_NAME }}
      SERVICE_ACCOUNT_ID: ${{ secrets.SERVICE_ACCOUNT_ID }}
      INSTANCE_GROUP_NAME: ${{ secrets.INSTANCE_GROUP_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start mysql
        run: sudo service mysql start

      - name: setup log file
        run: |
          sudo mkdir -p /var/log
          sudo touch /var/log/webapp.log
          sudo chmod 666 /var/log/webapp.log

      - name: Run tests
        run: pytest -v

      - name: authenticate gcloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@v2

      - name: 'Use gcloud CLI'
        run: gcloud info

      - name: Install Packer
        run: |
          PACKER_VERSION="1.10.1"
          curl -O https://releases.hashicorp.com/packer/${PACKER_VERSION}/packer_${PACKER_VERSION}_linux_amd64.zip
          unzip -o packer_${PACKER_VERSION}_linux_amd64.zip -d /tmp
          sudo mv /tmp/packer /usr/local/bin
          packer --version

      - name: Create webapp.zip
        run: |
          zip -r webapp.zip .

      - name: Initialize Packer Configuration and Format packer file
        run: |
          packer init packer/gci-machine-image.pkr.hcl
          packer fmt packer/gci-machine-image.pkr.hcl

      - name: Validate Packer Configuration
        run: |
          packer validate packer/gci-machine-image.pkr.hcl

      - name: Build Golden Image for GCE
        run: |
          packer build packer/gci-machine-image.pkr.hcl
          sleep 60

      - name: Continuous deployment of the code
        run: |
          gcloud components update

          IMAGE_ID=$(gcloud compute images list --no-standard-images \
            --format="table(NAME,CREATION_TIMESTAMP)" --sort-by="CREATION_TIMESTAMP" \
          | tail -n 1)

          echo "Latest Image Id is: $IMAGE_ID"

          RANDOM_ID=$(cat /proc/sys/kernel/random/uuid)

          echo "Instance template name: webapp-instance-template-$RANDOM_ID"

          gcloud compute instance-templates create webapp-instance-template-$RANDOM_ID \
          --project=${{ secrets.GCP_PROJECT_ID }} \
          --machine-type=${{ secrets.MACHINE_TYPE }} --create-disk=image=projects/${{ secrets.GCP_PROJECT_ID }}/global/images/$IMAGE_ID,type=${{ secrets.DISK_TYPE }},size=${{ secrets.DISK_SIZE }},kms-key=projects/${{ secrets.GCP_PROJECT_ID }}/locations/${{ secrets.GCP_REGION }}/keyRings/${{ secrets.KEY_RING }}/cryptoKeys/${{ secrets.VM_KMS_DISK_KEY }},auto-delete=yes,boot=yes,device-name=persistent-disk-0 \
          --metadata=startup-script='#!/bin/bash

          FILE_PATH="/etc/environment"

          # Export env variables only when file doesnt exist
          if [[ ! -e $FILE_PATH || ! -s $FILE_PATH ]]; then
              echo "MYSQL_HOST=${{ secrets.CLOUD_SQL_HOST }}" | sudo tee -a /etc/environment
              echo "MYSQL_USER=${{ secrets.CLOUD_SQL_USER }}" | sudo tee -a /etc/environment
              echo "MYSQL_PASSWORD=${{ secrets.CLOUD_SQL_PASSWORD }}" | sudo tee -a /etc/environment
              echo "MYSQL_DB=${{ secrets.CLOUD_SQL_DB }}" | sudo tee -a /etc/environment
              echo "LOG_FILE=${{ secrets.LOG_FILE }}" | sudo tee -a /etc/environment
              echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" | sudo tee -a /etc/environment
              echo "PUBSUB_TOPIC_ID=${{ secrets.PUBSUB_TOPIC }}" | sudo tee -a /etc/environment
          fi

          sudo touch /var/log/start_up_executed' \
          --network-interface=network=${{ secrets.VPC_NETWORK_NAME }},subnet=${{ secrets.SUB_NETWORK_NAME }},no-address \
          --tags webapp --maintenance-policy=MIGRATE --provisioning-model=STANDARD --region=${{ secrets.GCP_REGION }} --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --reservation-affinity=any \
          --service-account=${{ secrets.SERVICE_ACCOUNT_ID }} --scopes=pubsub,cloud-platform

          gcloud compute instance-groups managed rolling-action start-update ${{ secrets.INSTANCE_GROUP_NAME }} \
          --replacement-method=recreate --version=template=webapp-instance-template-$RANDOM_ID \
          --max-surge=0 --region=${{ secrets.GCP_REGION }}

          gcloud compute instance-groups managed wait-until ${{ secrets.INSTANCE_GROUP_NAME }} \
          --version-target-reached --region=${{ secrets.GCP_REGION }}

          echo "Instances were recreated with the latest build successfully !!"
