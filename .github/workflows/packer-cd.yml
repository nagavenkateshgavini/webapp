name: Packer Build
on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  packer-build:
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    env:
      MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      MYSQL_DB: ${{ secrets.MYSQL_DB }}
      FLASK_APP: 'app'
      LOG_FILE: ${{ secrets.LOG_FILE }}
      GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
      SOURCE_GCI_IMAGE: ${{ secrets.SOURCE_GCI_IMAGE }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_IMAGE_BUILD_NETWORK: ${{ secrets.GCP_IMAGE_BUILD_NETWORK }}
      BUILD_IMAGE_ZONE: ${{ secrets.BUILD_IMAGE_ZONE }}
      ENV_TYPE: "Test"
      MACHINE_TYPE: ${{ secrets.MACHINE_TYPE }}
      DISK_TYPE: ${{ secrets.DISK_TYPE }}
      DISK_SIZE: ${{ secrets.DISK_SIZE }}
      DISK_MODE: ${{ secrets.DISK_MODE }}
      GCP_REGION: ${{ secrets.GCP_REGION }}
      KEY_RING: ${{ secrets.KEY_RING }}
      VM_KMS_DISK_KEY: ${{ secrets.VM_KMS_DISK_KEY }}
      CLOUD_SQL_HOST: ${{ secrets.CLOUD_SQL_HOST }}
      CLOUD_SQL_USER: ${{ secrets.CLOUD_SQL_USER }}
      CLOUD_SQL_PASSWORD: ${{ secrets.CLOUD_SQL_PASSWORD }}
      CLOUD_SQL_DB: ${{ secrets.CLOUD_SQL_DB }}
      PUBSUB_TOPIC: ${{ secrets.PUBSUB_TOPIC }}
      VPC_NETWORK_NAME: ${{ secrets.VPC_NETWORK_NAME }}
      SUB_NETWORK_NAME: ${{ secrets.SUB_NETWORK_NAME }}
      SERVICE_ACCOUNT_ID: ${{ secrets.SERVICE_ACCOUNT_ID }}
      INSTANCE_GROUP_NAME: ${{ secrets.INSTANCE_GROUP_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start mysql
        run: sudo service mysql start

      - name: setup log file
        run: |
          sudo mkdir -p /var/log
          sudo touch /var/log/webapp.log
          sudo chmod 666 /var/log/webapp.log

      - name: Run tests
        run: pytest -v

      - name: authenticate gcloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@v2

      - name: 'Use gcloud CLI'
        run: gcloud info

      - name: Install Packer
        run: |
          PACKER_VERSION="1.10.1"
          curl -O https://releases.hashicorp.com/packer/${PACKER_VERSION}/packer_${PACKER_VERSION}_linux_amd64.zip
          unzip -o packer_${PACKER_VERSION}_linux_amd64.zip -d /tmp
          sudo mv /tmp/packer /usr/local/bin
          packer --version

      - name: Create webapp.zip
        run: |
          zip -r webapp.zip .

      - name: Initialize Packer Configuration and Format packer file
        run: |
          packer init packer/gci-machine-image.pkr.hcl
          packer fmt packer/gci-machine-image.pkr.hcl

      - name: Validate Packer Configuration
        run: |
          packer validate packer/gci-machine-image.pkr.hcl

      - name: Build Golden Image for GCE
        run: |
          packer build packer/gci-machine-image.pkr.hcl
          sleep 60

      - name: Get the latest packer build
        id: fetch_image_id
        run: |
          echo 'image_id=$(gcloud compute images list --no-standard-images \
            --format="table(NAME,CREATION_TIMESTAMP)" --sort-by="CREATION_TIMESTAMP" \
          | tail -n 1)' >> $GITHUB_OUTPUT

      - name: Generate a random ID for the instance template name
        id: generate_random_id
        run: echo "::set-output name=random_id::$(cat /proc/sys/kernel/random/uuid)"

      - name: Create instance template
        id: fetch_template_name
        run: |
          gcloud compute instance-templates create \
          --machine-type=$MACHINE_TYPE --name="webapp-instance-template-${{ steps.generate_random_id.outputs.random_id }}" \
          --create-disk=image="projects/$GCP_PROJECT_ID/global/images/${{ steps.fetch_image_id.outputs.image_id }}", type=$DISK_TYPE, size=$DISK_SIZE, \
          kms-key="projects/$GCP_PROJECT_ID/locations/$GCP_REGION/keyRings/$KEY_RING/cryptoKeys/VM_KMS_DISK_KEY"
          --metadata=startup-script='#!/bin/bash

          FILE_PATH="/etc/environment"

          # Export env variables only when file doesn't exist
          if [[ ! -e $FILE_PATH || ! -s $FILE_PATH ]]; then
              echo "MYSQL_HOST=$CLOUD_SQL_HOST" | sudo tee -a /etc/environment
              echo "MYSQL_USER=$CLOUD_SQL_USER" | sudo tee -a /etc/environment
              echo "MYSQL_PASSWORD=$CLOUD_SQL_PASSWORD" | sudo tee -a /etc/environment
              echo "MYSQL_DB=$CLOUD_SQL_DB" | sudo tee -a /etc/environment
              echo "LOG_FILE=$LOG_FILE" | sudo tee -a /etc/environment
              echo "GCP_PROJECT_ID=$GCP_PROJECT_ID" | sudo tee -a /etc/environment
              echo "PUBSUB_TOPIC_ID=$PUBSUB_TOPIC" | sudo tee -a /etc/environment
          fi

          sudo touch /var/log/start_up_executed' \
          --network-interface=network=$VPC_NETWORK_NAME, subnet=$SUB_NETWORK_NAME \
          --tags webapp \
          --service-account=$SERVICE_ACCOUNT_ID --scopes=["pubsub", "cloud-platform"]

      - name: Create managed instance group
        run: |
          gcloud compute instance-groups managed rolling-action start-update $INSTANCE_GROUP_NAME \
          --replacement-method=recreate --version=template=webapp-instance-template-${{ steps.generate_random_id.outputs.random_id }} \
          --max-unavailable=1 --max-surge=0

      - name: Wait for REACHED status
        run: |
          gcloud compute instance-groups managed wait-until $INSTANCE_GROUP_NAME \
          --version-target-reached
